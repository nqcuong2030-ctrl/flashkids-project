const fs = require('fs');
const path = require('path');
const sdk = require("microsoft-cognitiveservices-speech-sdk");
require('dotenv').config(); // T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env

// --- C·∫§U H√åNH ---
const SPEECH_KEY = process.env.AZURE_SPEECH_KEY;
const SPEECH_REGION = process.env.AZURE_SPEECH_REGION;
const VOCAB_FILE = './data/flashcards-all.json'; // S·ª¨A T√äN FILE N√ÄY N·∫æU C·∫¶N
const OUTPUT_DIR = 'audio'; // T√™n th∆∞ m·ª•c ƒë·∫ßu ra

/**
 * H√†m g·ªçi Azure ƒë·ªÉ t·∫°o 1 file MP3.
 * @param {string} text - VƒÉn b·∫£n c·∫ßn ƒë·ªçc.
 * @param {string} voiceName - T√™n gi·ªçng ƒë·ªçc (v√≠ d·ª•: "en-US-JennyNeural").
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n ƒë·ªÉ l∆∞u file MP3.
 */
async function textToSpeech(text, voiceName, outputPath) {
    return new Promise((resolve, reject) => {
        // T·ª± ƒë·ªông b·ªè qua n·∫øu file ƒë√£ t·ªìn t·∫°i. Gi√∫p b·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i script m√† kh√¥ng c·∫ßn t·∫£i l·∫°i t·ª´ ƒë·∫ßu.
        if (fs.existsSync(outputPath)) {
            console.log(`- B·ªè qua (ƒë√£ t·ªìn t·∫°i): ${path.basename(outputPath)}`);
            resolve();
            return;
        }

        const speechConfig = sdk.SpeechConfig.fromSubscription(SPEECH_KEY, SPEECH_REGION);
        speechConfig.speechSynthesisOutputFormat = sdk.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3;
		speechConfig.speechSynthesisVoiceName = voiceName;
        const audioConfig = sdk.AudioConfig.fromAudioFileOutput(outputPath);
        const synthesizer = new sdk.SpeechSynthesizer(speechConfig, audioConfig);

        synthesizer.speakTextAsync(
            text,
            result => {
                synthesizer.close();
                if (result.reason === sdk.ResultReason.SynthesizingAudioCompleted) {
                    console.log(`+ T·∫£i th√†nh c√¥ng: ${path.basename(outputPath)}`);
                    resolve();
                } else {
                    console.error(`L·ªói khi t·∫°o file cho "${text}": ${result.errorDetails}`);
                    reject(new Error(result.errorDetails));
                }
            },
            error => {
                synthesizer.close();
                console.error(`L·ªói nghi√™m tr·ªçng cho "${text}": ${error}`);
                reject(error);
            }
        );
    });
}

// H√†m ch√≠nh ƒë·ªÉ ch·∫°y to√†n b·ªô qu√° tr√¨nh
async function main() {
    if (!SPEECH_KEY || !SPEECH_REGION) {
        return console.error("L·ªói: Vui l√≤ng cung c·∫•p kh√≥a v√† v√πng Azure trong file .env");
    }

    // ƒê·ªçc file d·ªØ li·ªáu t·ª´ v·ª±ng
    const vocabData = JSON.parse(fs.readFileSync(VOCAB_FILE, 'utf-8'));
    const flashcards = vocabData.flashcards;

    // T·∫°o c√°c th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a c√≥
    fs.mkdirSync(path.join(OUTPUT_DIR, 'en-US'), { recursive: true });
    fs.mkdirSync(path.join(OUTPUT_DIR, 'vi-VN'), { recursive: true });

    console.log(`B·∫Øt ƒë·∫ßu t·∫£i ${flashcards.length * 2} file √¢m thanh...`);

    // L·∫∑p qua t·ª´ng th·∫ª t·ª´ v·ª±ng ƒë·ªÉ t·∫°o file
    for (const card of flashcards) {
        try {
            // T·∫°o file ti·∫øng Anh
            // ƒê·∫£m b·∫£o t√™n file l√† ch·ªØ th∆∞·ªùng v√† x·ª≠ l√Ω c√°c k√Ω t·ª± kh√¥ng h·ª£p l·ªá n·∫øu c√≥
            const englishFilename = card.english.toLowerCase().replace(/[^a-z0-9\s]/g, '').replace(/\s+/g, '_');
            const englishPath = path.join(OUTPUT_DIR, 'en-US', `${englishFilename}.mp3`);
            await textToSpeech(card.english, "en-US-JennyNeural", englishPath);
            
            // T·∫°m d·ª´ng 200ms ƒë·ªÉ tr√°nh g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu c√πng l√∫c l√™n Azure
            await new Promise(resolve => setTimeout(resolve, 200)); 

            // T·∫°o file ti·∫øng Vi·ªát
            const vietnameseFilename = slugifyVietnamese(card.vietnamese); 
            const vietnamesePath = path.join(OUTPUT_DIR, 'vi-VN', `${vietnameseFilename}.mp3`);
            await textToSpeech(card.vietnamese, "vi-VN-HoaiMyNeural", vietnamesePath);
            
            await new Promise(resolve => setTimeout(resolve, 200));

        } catch (error) {
            console.error(`=> Kh√¥ng th·ªÉ x·ª≠ l√Ω t·ª´ "${card.english}". B·ªè qua.`);
        }
    }
    console.log("üéâ Ho√†n t·∫•t! T·∫•t c·∫£ c√°c file √¢m thanh ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ.");
}

function slugifyVietnamese(text) {
    text = text.toLowerCase();
    text = text.replace(/√†|√°|·∫°|·∫£|√£|√¢|·∫ß|·∫•|·∫≠|·∫©|·∫´|ƒÉ|·∫±|·∫Ø|·∫∑|·∫≥|·∫µ/g, "a");
    text = text.replace(/√®|√©|·∫π|·∫ª|·∫Ω|√™|·ªÅ|·∫ø|·ªá|·ªÉ|·ªÖ/g, "e");
    text = text.replace(/√¨|√≠|·ªã|·ªâ|ƒ©/g, "i");
    text = text.replace(/√≤|√≥|·ªç|·ªè|√µ|√¥|·ªì|·ªë|·ªô|·ªï|·ªó|∆°|·ªù|·ªõ|·ª£|·ªü|·ª°/g, "o");
    text = text.replace(/√π|√∫|·ª•|·ªß|≈©|∆∞|·ª´|·ª©|·ª±|·ª≠|·ªØ/g, "u");
    text = text.replace(/·ª≥|√Ω|·ªµ|·ª∑|·ªπ/g, "y");
    text = text.replace(/ƒë/g, "d");
    // X√≥a c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng mong mu·ªën
    text = text.replace(/[^a-z0-9\s]/g, '');
    // Thay th·∫ø kho·∫£ng tr·∫Øng b·∫±ng g·∫°ch d∆∞·ªõi
    text = text.replace(/\s+/g, '_');
    return text;
}

main();